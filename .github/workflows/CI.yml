name: CI

env:
  PROJECT_NAME: unison
  PROJECT_DESC: "`unison` file synchronizer"
  PROJECT_EXES: "unison unison-fsmonitor"

on:
  - pull_request
  - push

jobs:
  docs:
    runs-on: ubuntu-20.04

    steps:
    - run: sudo apt-get update

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use OCaml
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: 4.14.x
        opam-depext: false

    - run: sudo apt-get install hevea lynx texlive-latex-base

    - run: opam exec -- make docs

    - name: Store user manual for the build jobs
      uses: actions/upload-artifact@v3
      with:
        name: unison-docs
        path: |
          doc/unison-manual.txt
          doc/unison-manual.html
          doc/unison-manual.pdf

  build:
    if: ${{ !cancelled() }}    # Don't fail if 'docs' failed
    needs: docs

    strategy:
      fail-fast: false
      matrix:
        job:
        - { os: macos-12      , ocaml-version: 4.14.0 }
        - { os: macos-10.15   , ocaml-version: 4.14.0           , publish: true }
        - { os: ubuntu-22.04  , ocaml-version: 4.14.0 }
        - { os: ubuntu-20.04  , ocaml-version: 4.14.0 }
        - { os: ubuntu-18.04  , ocaml-version: 4.14.0           , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: "4.14.0+options,ocaml-option-musl,ocaml-option-static,ocaml-option-flambda"  , publish: true }
        - { os: ubuntu-18.04  , ocaml-version: 4.13.1 }
        - { os: ubuntu-18.04  , ocaml-version: 4.12.1 }
        - { os: ubuntu-18.04  , ocaml-version: 4.11.2 }
        - { os: ubuntu-18.04  , ocaml-version: 4.10.2 }
        - { os: ubuntu-18.04  , ocaml-version: 4.09.1 }
        - { os: ubuntu-18.04  , ocaml-version: 4.08.1           , publish: true }
        - { os: windows-2022  , ocaml-version: 4.14.0+mingw64c  , publish: true }
        - { os: windows-2019  , ocaml-version: 4.14.0+mingw32c  , publish: true }

    runs-on: ${{ matrix.job.os }}

    steps:
    - if: contains(matrix.job.os, 'ubuntu')
      run: sudo apt-get update

    - if: runner.os == 'Windows'
      name: "Windows: Stash away the default MSYS installation"
      continue-on-error: true
      shell: cmd
      # This conflicts with Cygwin installed by setup-ocaml
      # Adjusting PATH alone does not seem to work
      run: rename C:\msys64 dmsys64

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Initialize workflow variables
      id: vars
      shell: bash
      run: |
        outputs() { for var in "$@" ; do echo steps.vars.outputs.${var}="${!var}"; echo "${var}=${!var}" >> $GITHUB_OUTPUT ; done; }
        # normalize to pre-compiled ocaml compiler variants for windows/Cygwin (decreases OCaml install time by 50%)
        case '${{ matrix.job.ocaml-version }}' in
          *+*) OCAML_COMPILER='ocaml-variants.${{ matrix.job.ocaml-version }}' ;;
            *) OCAML_COMPILER='ocaml-base-compiler.${{ matrix.job.ocaml-version }}' ;;
        esac
        OCAML_VARIANT='${{ matrix.job.ocaml-version }}'
        OCAML_VARIANT="${OCAML_VARIANT/+options/}"
        outputs OCAML_VARIANT OCAML_COMPILER
        # architecture/platform vars
        EXE_suffix='' ; case '${{ matrix.job.os }}' in windows-*) EXE_suffix=".exe" ;; esac
        MinGW_ARCH='x86_64' ; case '${{ matrix.job.ocaml-version }}' in *+mingw32*) MinGW_ARCH='i686' ;; *+mingw64*) MinGW_ARCH='x86_64' ;; esac
        MSVC_ARCH='' ; case '${{ matrix.job.ocaml-version }}' in *+msvc32*) MSVC_ARCH='x86' ;; *+msvc64*) MSVC_ARCH='x64' ;; esac
        STATIC='false' ; case '${{ matrix.job.ocaml-version }}' in *-musl*) STATIC='true' ;; esac
        outputs EXE_suffix MinGW_ARCH MSVC_ARCH STATIC
        case '${{ matrix.job.os }}' in macos-*) echo "MACOSX_DEPLOYMENT_TARGET=10.6" >> $GITHUB_ENV ;; esac
        # staging environment
        STAGING_DIR='_staging'
        outputs STAGING_DIR
        # parse commit reference info
        echo GITHUB_REF=${GITHUB_REF}
        echo GITHUB_SHA=${GITHUB_SHA}
        REF_NAME="${GITHUB_REF#refs/*/}"
        unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH="${GITHUB_REF#refs/heads/}" ;; esac;
        unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG="${GITHUB_REF#refs/tags/}" ;; esac;
        REF_SHAS="${GITHUB_SHA:0:8}"
        outputs REF_BRANCH REF_NAME REF_SHAS REF_TAG
        # deployable tag? (ie, leading "vM" or "M"; M == version number)
        unset DEPLOY ; if [[ $REF_TAG =~ ^[vV]?[0-9].* ]]; then DEPLOY='true' ; fi
        outputs DEPLOY
        # package name
        PKG_suffix='.tar.gz' ; case '${{ matrix.job.os }}' in windows-*) PKG_suffix='.zip' ;; esac;
        PKG_OS='linux' ; case '${{ matrix.job.os }}' in macos-*) PKG_OS='${{ matrix.job.os }}' ;; windows-*) PKG_OS='windows' ;; esac;
        PKG_STATIC='' ; case '${{ matrix.job.ocaml-version }}' in *-static*) PKG_STATIC='.static' ;; esac;
        PKG_ARCH='x86_64' ; case '${{ matrix.job.ocaml-version }}' in *+32bit* | *+mingw32*) PKG_ARCH='i386' ;; esac;
        PKG_VER="${REF_TAG:-$REF_SHAS}"
        PKG_BASENAME="${PROJECT_NAME}-${PKG_VER}+ocaml-${OCAML_VARIANT//,ocaml-option-*/}+${PKG_ARCH}.${PKG_OS}${PKG_STATIC}"
        PKG_NAME="${PKG_BASENAME}${PKG_suffix}"
        PKG_DIR="${STAGING_DIR}/${PKG_BASENAME}"
        outputs PKG_VER PKG_BASENAME PKG_DIR PKG_NAME PKG_OS PKG_suffix
        COMPRESS_CMD='tar czf'; case '${{ matrix.job.os }}' in windows-*) COMPRESS_CMD='7z -y a' ;; esac;
        outputs COMPRESS_CMD

    - name: Create/configure any needed build/workspace
      shell: bash
      run: |
        # create build/work space
        mkdir -p '${{ steps.vars.outputs.STAGING_DIR }}'
        mkdir -p '${{ steps.vars.outputs.PKG_DIR }}'
        mkdir -p '${{ steps.vars.outputs.PKG_DIR }}'/bin

    - name: Enable/config MSVC environment (if/when needed)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: "${{ steps.vars.outputs.MSVC_ARCH }}"
      if: contains(matrix.job.ocaml-version, '+msvc')

    - name: "Windows: Cygwin setup"
      if: runner.os == 'Windows'
      run: Invoke-WebRequest 'https://cygwin.com/setup-x86_64.exe' -OutFile 'setup-x86_64.exe'

    # [2022-05] Cygwin mingw64 binutils 2.38 produces invalid GUI binaries.
    # Pin binutils to version 2.37 as a workaround.
    - name: "Windows: mingw64 binutils workaround hack"
      if: runner.os == 'Windows'
      # The setup does not complete properly in powershell for some reason
      shell: cmd
      run: .\setup-x86_64.exe --quiet-mode --root D:\cygwin --site http://cygwin.mirror.constant.com --symlink-type=sys --packages mingw64-i686-binutils=2.37-2,mingw64-x86_64-binutils=2.37-2

    - name: Use OCaml ${{ matrix.job.ocaml-version }}
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: "${{ steps.vars.outputs.OCAML_COMPILER }}"
        opam-pin: false
        opam-depext: false
      # setup-ocaml can prepare the build environment from unison.opam
      # We're not relying on that capability here, to make sure the builds
      # also work without using unison.opam

    ## note: at this point, after OCaml installation, windows platforms will use Cygwin bash as the default
    ##   ... Cygwin bash cannot handle shell scripts containing CRLF EOLs (which are what is generated by GHA on windows platforms)
    ##   ... so, "igncr" must be added to SHELLOPTS

    - name: Prepare Cygwin environment (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo %CYGWIN_ROOT_BIN%>> %GITHUB_PATH%
        echo %CYGWIN_ROOT_WRAPPERBIN%>> %GITHUB_PATH%
        echo "/usr/${{ steps.vars.outputs.MinGW_ARCH }}-w64-mingw32/sys-root/mingw/bin">> %GITHUB_PATH%
        echo SHELLOPTS=igncr>> %GITHUB_ENV%

    - shell: bash
      run: |
        opam exec -- make src OSTYPE=$OSTYPE UISTYLE=text STATIC=${{ steps.vars.outputs.STATIC }}
        # stage
        # * notes: darwin/macos doesn't build `unison-fsmonitor`
        for file in ${PROJECT_EXES} ; do
          if [ -f "src/${file}${{ steps.vars.outputs.EXE_suffix }}" ]; then
            cp "src/${file}${{ steps.vars.outputs.EXE_suffix }}" '${{ steps.vars.outputs.PKG_DIR }}/bin'
            echo "'src/${file}${{ steps.vars.outputs.EXE_suffix }}' copied to '${{ steps.vars.outputs.PKG_DIR }}/bin'"
          fi
        done

    - run: opam exec -- make test

    ## There is still code to run tests with old ocaml on Windows.
    ## That remains intentionally so that someone could turn it on if
    ## desired.
    - name: Run self-tests over RPC
      if: runner.os == 'Windows' && !contains(matrix.job.ocaml-version, '4.14')
      shell: bash
      run: |
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./src/testbak2 ./src/unison -socket 55443 &
        sleep 1 # Wait for the server to be fully started
        ./src/unison -ui text -selftest testr1 socket://127.0.0.1:55443/testr2 -killserver

    - name: Run self-tests over local socket
      # Recent Windows versions do support Unix domain sockets
      # but at least OCaml 4.14 is required to use that support
      if: runner.os != 'Windows' || contains(matrix.job.ocaml-version, '4.14')
      shell: bash
      run: |
        mkdir localsocket
        chmod 700 localsocket
        # Separate backup dir must be set for server instance so that the central
        # backup location of both instances doesn't overlap
        UNISONBACKUPDIR=./src/testbak4 ./src/unison -socket ./localsocket/test.sock &
        sleep 1 # Wait for the server to be fully started
        ${{ runner.os == 'Windows' }} || test -S ./localsocket/test.sock
        ./src/unison -ui text -selftest testr3 socket://{./localsocket/test.sock}/testr4 -killserver

    - name: Prepare lablgtk install (Windows)
      if: ${{ runner.os == 'Windows' && contains(matrix.job.ocaml-version, '+mingw') }}
      shell: bash
      run: |
        opam install opam-depext depext-cygwinports
        setup-x86_64.exe --quiet-mode --root "${CYGWIN_ROOT}" --site http://cygwin.mirror.constant.com --symlink-type=sys --packages hicolor-icon-theme,adwaita-icon-theme
        # [2022-11] This terrible (terrible) hack is here to forcibly skip
        # building the fontconfig cache because it can take 30-45 minutes
        # on GHA runners and is never needed anyway.
        setup-x86_64.exe --quiet-mode --root "${CYGWIN_ROOT}" --site http://cygwin.mirror.constant.com --symlink-type=sys --local-package-dir D:/a --download --packages mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig
        cd 'D:/a/https%3a%2f%2fcygwin.mirror.constant.com%2f/noarch/release/'mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig
        CNAMEXZ=$(ls mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig*.tar.xz)
        CNAME=${CNAMEXZ%.xz}
        unxz ${CNAMEXZ}
        tar --delete --file ${CNAME} etc/postinstall/zp_mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig_cache.sh
        xz ${CNAME}
        sha512sum > sha512.sum
        CSZ=$(stat -c %s ${CNAMEXZ})
        SHASUM=$(sha512sum ${CNAMEXZ})
        cd 'D:/a/https%3a%2f%2fcygwin.mirror.constant.com%2f/x86_64'
        mv setup.ini tsetup.ini
        rm -f setup*
        sed -E -e "\|install: noarch/release/mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig/${CNAMEXZ}|s/xz .+/xz ${CSZ} ${SHASUM%% *}/" tsetup.ini > setup.ini
        rm tsetup.ini
        sha512sum > sha512.sum
        setup-x86_64.exe --quiet-mode --root "${CYGWIN_ROOT}" --symlink-type=sys --local-install --local-package-dir 'D:/a/https%3a%2f%2fcygwin.mirror.constant.com%2f' --mirror-mode --no-verify --packages mingw64-${{ steps.vars.outputs.MinGW_ARCH }}-fontconfig

    - name: lablgtk install
      ## [2020-09] non-working/unavailable for MSVC or musl OCaml variants ; also, non-working for 32bit OCaml variant (see [GH:garrigue/lablgtk#64](https://github.com/garrigue/lablgtk/issues/64))
      if: ${{ ! ( contains(matrix.job.ocaml-version, '+msvc') || contains(matrix.job.ocaml-version, '-musl') || contains(matrix.job.ocaml-version, '-32bit') ) }}
      run: opam depext --install --verbose --yes lablgtk3 && opam install ocamlfind

    - if: steps.vars.outputs.STATIC != 'true' ## unable to build static gtk/gui
      shell: bash
      run: |
        opam exec -- make src OSTYPE=$OSTYPE UISTYLE=gtk3 STATIC=${{ steps.vars.outputs.STATIC }}
        # stage
        # * copy only main/first project binary
        project_exe_stem=${PROJECT_EXES%% *}
        cp "src/${project_exe_stem}${{ steps.vars.outputs.EXE_suffix }}" "${{ steps.vars.outputs.PKG_DIR }}/bin/${project_exe_stem}-gui${{ steps.vars.outputs.EXE_suffix }}"

    - name: "Build WinOS text+gui hybrid"
      if: runner.os == 'Windows' && steps.vars.outputs.STATIC != 'true' ## WinOS, non-static (unable to build static gtk/gui)
      shell: bash
      run: |
        # create and stage text+gui hybrid for Windows
        # * copy only main/first project binary
        project_exe_stem=${PROJECT_EXES%% *}
        # * clean/remove build artifact(s)
        rm "src/${project_exe_stem}${{ steps.vars.outputs.EXE_suffix }}" ##.or.# opam exec -- make -C src clean #.or.# opam exec -- make clean
        # * re-create (with hybrid text+gui UI)
        opam exec -- make src OSTYPE=$OSTYPE UISTYLE=gtk3 UI_WINOS=hybrid STATIC=${{ steps.vars.outputs.STATIC }}
        cp "src/${project_exe_stem}${{ steps.vars.outputs.EXE_suffix }}" "${{ steps.vars.outputs.PKG_DIR }}/bin/${project_exe_stem}-text+gui${{ steps.vars.outputs.EXE_suffix }}"

    - uses: actions/upload-artifact@v3
      with:
        name: unison-${{ steps.vars.outputs.REF_SHAS }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}
        path: ${{ steps.vars.outputs.PKG_DIR }}/bin/*

    - name: Copy user manual
      continue-on-error: ${{ !(steps.vars.outputs.DEPLOY && matrix.job.publish) }}
      uses: actions/download-artifact@v3
      with:
        name: unison-docs
        path: '${{ steps.vars.outputs.PKG_DIR }}'

    - name: Prepare package
      # if: steps.vars.outputs.DEPLOY
      shell: bash
      run: |
        ## package artifact(s)
        PKG_DIR='${{ steps.vars.outputs.PKG_DIR }}'
        # `strip` binaries
        strip "${PKG_DIR}/bin"/*'${{ steps.vars.outputs.EXE_suffix }}'
        # README and LICENSE
        (shopt -s nullglob; for f in [R]'EADME'{,.*}; do cp $f "${PKG_DIR}"/ ; done)
        (shopt -s nullglob; for f in [L]'ICENSE'{-*,}{,.*}; do cp $f "${PKG_DIR}"/ ; done)

    - if: runner.os == 'Windows'
      name: "Windows: Package gtk"
      shell: bash
      run: |
        ## package artifact(s)
        PKG_DIR='${{ steps.vars.outputs.PKG_DIR }}'
        # collect any needed dlls/libraries
        # dlls
        dll_refs() { eval "$(opam env)" ; eval "$(ocaml-env cygwin)" ; objdump -x "$@" | grep -Po "\S+[.]dll$" | xargs -I{} 2>/dev/null which "{}" | sort -u ; }
        filtered_dll_refs() { list="$(dll_refs "$@" | grep -vF "$(cygpath ${WINDIR})" | perl -lape '$_ = qq/@{[sort @F]}/')" ; echo "$list" ; }
        recursive_filtered_dll_refs() { list="$(filtered_dll_refs "$@")" ; n=0 ; while [ $n -lt $(echo "$list" | wc -l) ]; do n=$(echo "$list" | wc -l) ; list="$(filtered_dll_refs $list)" ; done ; echo "$list" ; }
        IFS=$'\n' DLL_list=( "$(recursive_filtered_dll_refs "${PKG_DIR}"/bin/*)" )
        for dll in ${DLL_list[@]} ; do cp "${dll}" "${PKG_DIR}"/bin ; done
        TARGET_ARCH_ID='x86_64'; case '${{ matrix.job.ocaml-version }}' in *+mingw32*|*+msvc32*) TARGET_ARCH_ID='i686' ;; esac
        # required gdk support files
        mkdir "${PKG_DIR}"/lib
        cp -r /usr/${TARGET_ARCH_ID}-w64-mingw32/sys-root/mingw/lib/gdk-pixbuf-2.0 "${PKG_DIR}"/lib/
        # update loader.cache to point to local relative installation
        mv "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original
        cat "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original | sed -E 's#([^"]*)(lib/gdk-pixbuf-2.0/2.10.0/loaders/[^"]*[.]dll)#../\2#' > "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
        rm "${PKG_DIR}"/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache.original
        # required icons
        mkdir "${PKG_DIR}"/share
        cp -rL /usr/share/icons "${PKG_DIR}"/share
        # compile glib settings schema
        mkdir -p "${PKG_DIR}"/share/glib-2.0
        cp -r /usr/${TARGET_ARCH_ID}-w64-mingw32/sys-root/mingw/share/glib-2.0/schemas "${PKG_DIR}"/share/glib-2.0
        glib-compile-schemas "${PKG_DIR}"/share/glib-2.0/schemas
        # add gtk configuration
        mkdir -p "${PKG_DIR}"/etc/gtk-3.0
        printf "[Settings]\ngtk-button-images=true\ngtk-font-name=Segoe UI 9\n" > "${PKG_DIR}"/etc/gtk-3.0/settings.ini

    - name: Package
      shell: bash
      run: cd '${{ steps.vars.outputs.PKG_DIR }}/' && ${{ steps.vars.outputs.COMPRESS_CMD }} '../${{ steps.vars.outputs.PKG_NAME }}' *

    - uses: actions/upload-artifact@v3
      with:
        name: unison-${{ steps.vars.outputs.REF_SHAS }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}-publish
        path: ${{ steps.vars.outputs.STAGING_DIR }}/${{ steps.vars.outputs.PKG_NAME }}

    - name: Publish
      if: steps.vars.outputs.DEPLOY && matrix.job.publish
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.vars.outputs.STAGING_DIR }}/${{ steps.vars.outputs.PKG_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - if: runner.os == 'macOS'
      name: "macOS: Build and package Unison.app"
      id: macapp
      run: |
        opam exec -- make src UISTYLE=mac

        # package
        APP_NAME=Unison-${{ steps.vars.outputs.PKG_VER }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}.app.tar.gz
        echo APP_NAME=${APP_NAME} >> $GITHUB_OUTPUT

        tar czf ${APP_NAME} -C src/uimac/build/Default Unison.app

    - if: runner.os == 'macOS'
      name: "macOS: Upload Unison.app artifact"
      uses: actions/upload-artifact@v3
      with:
        name: Unison-${{ steps.vars.outputs.REF_SHAS }}.ocaml-${{ matrix.job.ocaml-version }}.${{ matrix.job.os }}.app
        path: ${{ steps.macapp.outputs.APP_NAME }}

    - if: runner.os == 'macOS' && steps.vars.outputs.DEPLOY && matrix.job.publish
      name: "macOS: Publish Unison.app"
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.macapp.outputs.APP_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


